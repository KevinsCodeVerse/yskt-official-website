{"ast":null,"code":"import \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.symbol.iterator.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nvar __spread = this && this.__spread || function () {\n  for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n  return ar;\n};\nimport { reportV3 } from './report-v3';\nvar Logger = /** @class */function () {\n  function Logger(token, disableReport, level, prefix) {\n    if (disableReport === void 0) {\n      disableReport = true;\n    }\n    if (level === void 0) {\n      level = 'OFF';\n    }\n    if (prefix === void 0) {\n      prefix = 'UPLOAD';\n    }\n    this.token = token;\n    this.disableReport = disableReport;\n    this.level = level;\n    this.prefix = prefix;\n    // 为每个类分配一个 id\n    // 用以区分不同的上传任务\n    this.id = ++Logger.id;\n  }\n  Logger.prototype.getPrintPrefix = function (level) {\n    return \"Qiniu-JS-SDK [\" + level + \"][\" + this.prefix + \"#\" + this.id + \"]:\";\n  };\n  /**\n   * @param  {V3LogInfo} data 上报的数据。\n   * @param  {boolean} retry 重试次数，可选，默认为 3。\n   * @description 向服务端上报统计信息。\n   */\n  Logger.prototype.report = function (data, retry) {\n    if (this.disableReport) return;\n    try {\n      reportV3(this.token, data, retry);\n    } catch (error) {\n      this.warn(error);\n    }\n  };\n  /**\n   * @param  {unknown[]} ...args\n   * @description 输出 info 级别的调试信息。\n   */\n  Logger.prototype.info = function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    var allowLevel = ['INFO'];\n    if (allowLevel.includes(this.level)) {\n      // eslint-disable-next-line no-console\n      console.log.apply(console, __spread([this.getPrintPrefix('INFO')], args));\n    }\n  };\n  /**\n   * @param  {unknown[]} ...args\n   * @description 输出 warn 级别的调试信息。\n   */\n  Logger.prototype.warn = function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    var allowLevel = ['INFO', 'WARN'];\n    if (allowLevel.includes(this.level)) {\n      // eslint-disable-next-line no-console\n      console.warn.apply(console, __spread([this.getPrintPrefix('WARN')], args));\n    }\n  };\n  /**\n   * @param  {unknown[]} ...args\n   * @description 输出 error 级别的调试信息。\n   */\n  Logger.prototype.error = function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    var allowLevel = ['INFO', 'WARN', 'ERROR'];\n    if (allowLevel.includes(this.level)) {\n      // eslint-disable-next-line no-console\n      console.error.apply(console, __spread([this.getPrintPrefix('ERROR')], args));\n    }\n  };\n  Logger.id = 0;\n  return Logger;\n}();\nexport default Logger;","map":{"version":3,"names":["reportV3","Logger","token","disableReport","level","prefix","id","prototype","getPrintPrefix","report","data","retry","error","warn","info","args","_i","arguments","length","allowLevel","includes","console","log","apply","__spread"],"sources":["../../src/logger/index.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}